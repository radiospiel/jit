#!/usr/bin/env roundup
describe "sql script tests"

. ./testhelper.inc

sql=$(cd $(dirname $1) && pwd)/sql

it_fails_without_valid_args() {
  ! $sql
  ! $sql list
  ! $sql "create table abc(x,y)"
}

it_fails_with_non_selects() {
  ! $sql "create table abc(x,y)"
}

it_selects() {
  [ "$($sql select '1')" = '1' ]
  [ "$($sql SELECT '1')" = '1' ]
  [ "$($sql select '1,2,3')" = '1 2 3' ]
  [ "$($sql select '1,2,3 where 1=1')" = '1 2 3' ]
  [ "$($sql select '1,2,3 where 1=0')" = '' ]
}

it_asks() {
  [ "$($sql ask '1')" = '1' ]
  [ "$($sql ask '1')" = '1' ]
  [ "$($sql ask '1,2,3')" = '1 2 3' ]
  [ "$($sql ask '1,2,3 where 1=1')" = '1 2 3' ]

  $sql ask '1,2,3 where 1=1'
  [ "$($sql ask '1,2,3 where 1=1')" = '1 2 3' ]

  ! $sql ask '1,2,3 where 1=0'
  [ "$($sql ask '1,2,3 where 1=0')" = "" ]
}

it_works_with_db_file() {
  db=$scrub/test.sqlite3
  echo "CREATE TABLE x(a,b); INSERT INTO x VALUES(1,1);INSERT INTO x values(2,4);INSERT INTO x values(3,9);" | sqlite3 $db
  chmod 400 $db
  [ "$($sql -f $db ask 'count(*) from x')" = "3" ]
}

it_works_with_strings_and_numbers() {
  db=$scrub/test.sqlite3
  echo "CREATE TABLE x(a,b); INSERT INTO x VALUES(1,1);INSERT INTO x values('2','4');" | sqlite3 $db

  # not escaped, the \' will be eaten by the shell
  [ "$($sql -f $db ask 'count(*) from x where a=?' 1)" = "1" ]
  [ "$($sql -f $db ask 'count(*) from x where a=?' 2)" = "0" ]

  # also not escaped, the \' will be eaten by the shell
  [ "$($sql -f $db ask 'count(*) from x where a=?' '1')" = "1" ]
  [ "$($sql -f $db ask 'count(*) from x where a=?' '2')" = "0" ]

  # escaping '
  [ "$($sql -f $db ask 'count(*) from x where a=?' \'1\')" = "0" ]
  [ "$($sql -f $db ask 'count(*) from x where a=?' \'2\')" = "1" ]
  [ "$($sql -f $db ask 'count(*) from x where a=?' @2@)" = "1" ]
}

it_makes_sense_with_text_templates() {
  db=$scrub/test.sqlite3
  echo "CREATE TABLE x(a,b); INSERT INTO x VALUES(1,1);INSERT INTO x values('2','4');" | sqlite3 $db

  lines="x"

  f() {
    $sql -f $db select "a, b from x" | while read A B ; do
      echo --$A--$B--
    done
  }

  [ "$(f)" = "$(echo "--1--1--\n--2--4--")" ]
}
