#!/bin/sh

usage() {
  cat <<-USAGE
jit translates a script into a binary when the script is first run.

Usage: jit <strategy> [ option .. ] -- <source> args ..."

Usually embedded into scripts via '!#/usr/bin/env jit <strategy> [ <option> .. ] --'.
Note: the trailing '--' MUST BE PRESENT in the shebang line!

Supported strategies are:
- cc: simple compilation via cc(1)
- flex: simple compilation via flex(1) and cc(1)
USAGE

exit 127
}

die() {
  echo "$@" >&2
  exit 127
}

# A shebang line of
#
#   #!/usr/bin/env jit cc -lnatpmp --
#
# combined with a script invocation of 
#
#   script a b c
#
# translates into these arguments
#
#   cc -lnatpmp -- ./natpmpc.c a b c
#
#
STRATEGY=$1; shift

STRATEGY_OPTIONS=()
while [ "$1" ] && [ "$1" != "--" ]; do
  STRATEGY_OPTIONS+=$1
  shift
done
STRATEGY_OPTIONS="${STRATEGY_OPTIONS[*]}"

if [ "${STRATEGY}" ] && [ "${STRATEGY}" != "clear" ]; then
  if [ "$1" != "--" ]; then
    die "Invalid jit line. A jit line MUST include the '--' separator as the last jit argument."
  fi
  shift

  SOURCE=$1; shift
else
  SOURCE=$STRATEGY_OPTIONS
fi

[ "${SOURCE}" ] || usage

FULL_SOURCE=$(cd "$(dirname "${SOURCE}")" && pwd)/$(basename "${SOURCE}")

REL_SOURCE=${FULL_SOURCE#$HOME}
BINARY=~/.jit/$REL_SOURCE

if [ ${STRATEGY} = "clear" ] ; then
  if [ -e ${BINARY} ] ; then
    rm ${BINARY}
    echo "Removed ${BINARY}" >&2
  fi
  exit 0
fi
  
if [ ${SOURCE} -nt ${BINARY} ] ; then

echo "${STRATEGY}'ing ${SOURCE} into ${BINARY}" >&2
mkdir -p -m 0777 $(dirname ${BINARY})

case "${STRATEGY}" in
  cc)
    sed '1 s/^.*$//' ${SOURCE} > ${BINARY}.c &&
    cc -o ${BINARY} ${BINARY}.c -O2 ${STRATEGY_OPTIONS}
    ;;
  flex)
    sed '1 s/^.*$//' ${SOURCE} > ${BINARY}.fl &&
    flex -o ${BINARY}.c ${BINARY}.fl &&
    cc -o ${BINARY} ${BINARY}.c -O2 ${STRATEGY_OPTIONS} -lfl
    ;;
  *)
    echo "Unknown jit strategy \"${STRATEGY}\"" >&2
    usage
    ;;
esac

[ $? == "0" ] || die "Cannot build ${BINARY}"

# set timestamp of binary to timestamp of source file
touch -r ${SOURCE} ${BINARY}

fi

exec -a ${SOURCE} ${BINARY} "$@"
