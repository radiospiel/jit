#!/bin/bash
set -e

usage() {
  cat <<-USAGE
jit translates a script into a binary when the script is first run. jit is usually embedded
into scripts via a header like this:

!#/usr/bin/env jit
jit.cc <strategy> <option> <option> ..

Supported strategies include:
- cc: simple compilation via cc(1)
- flex: simple compilation via flex(1) and cc(1)
USAGE

exit 127
}

die() {
  echo "$@" >&2
  exit 127
}

if [ "$1" = "--clear" ]; then
  JIT_CLEAR=y
  shift
fi

# The script needs a single argument.
[ "$1" ] || usage

SOURCE=$1
shift

# The jit script compiles the source into a binary. Determine the binary
# path. 

# Get the full path to the SOURCE.
FULL_SOURCE=$(cd "$(dirname "$SOURCE")" && pwd)/$(basename "$SOURCE")

# Get the path relative to the HOME directory.
RELATIVE_SOURCE="${FULL_SOURCE#$HOME}"

# Combine {JIT_}HOME and RELATIVE_SOURCE into BINARY target path.
BINARY="${JIT_HOME:-$HOME/.jit}/$RELATIVE_SOURCE"

if [ "$JIT_CLEAR" = "y" ]; then
  rm "${BINARY}" 2> /dev/null || true
  exit
fi

if [ ${SOURCE} -nt ${BINARY} ] ; then
  # Build binary if needed.
  TMP_SOURCE=$(mktemp -t jit.XXXX)

  # read and evaluate strategy line
  STRATEGY=$(sed -e 1d -e 3,99999d ${SOURCE})
  if [[ "$STRATEGY" == jit.* ]] ; then
    cat ${SOURCE} | sed -e '1,2d' > $TMP_SOURCE
  else
    echo "Invalid strategy line: '$STRATEGY', falling back to 'jit.cc'" >&2
    STRATEGY="jit.cc"
    cat ${SOURCE} | sed -e '1,1d' > $TMP_SOURCE
  fi
  
  STRATEGY="$STRATEGY "
  OPTIONS=${STRATEGY#* }
  STRATEGY=${STRATEGY%% *}

  if [ "$OPTIONS" ]; then
    echo "$STRATEGY'ing ${SOURCE} (w/options $OPTIONS)" >&2
  else
    echo "$STRATEGY'ing ${SOURCE}" >&2
  fi
  
  # echo $(dirname $0)/$STRATEGY "${TMP_SOURCE}" "${BINARY}" $OPTIONS >&2
  
  mkdir -p $(dirname ${BINARY})
  $(dirname $0)/$STRATEGY "${TMP_SOURCE}" "${BINARY}" $OPTIONS
fi

exec -a ${SOURCE} ${BINARY} "$@"
