.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "JIT\.LANG" "1" "July 2014" "" ""
.
.SH "NAME"
\fBjit\.LANG\fR \- compile source files as needed
.
.SH "SYNOPSIS"
jit\.LANG translates a script into a binary on the first run of that script\. This allows for easier deployment of binary, native code \- assuming the code itself is OS independent (using \fB#ifdef\fR conditionals or similar mechanisms, where needed\.)
.
.P
jit\.LANG is also helps to cross compile and distribute scripts\.
.
.SH "DESCRIPTION"
\fBjit\.LANG\fR translates a script into a binary when the script is run for the first time\. The jit main package itself is independent from the language of the script; there are different language drivers\.
.
.P
Current drivers include:
.
.IP "\(bu" 4
\fBjit\.cc\fR: to compile a C source file using cc(1)
.
.IP "\(bu" 4
\fBjit\.flex\fR: to compile a file via flex(1) and cc(1)
.
.IP "\(bu" 4
\fBjit\.go\fR: to compile a go source file via go(1)
.
.IP "" 0
.
.P
jit\.LANG assumes the tools needed by a specific strategy \- for example flex(1) and cc(1) \- are installed on the target system\.
.
.P
To use jit a user would embed it in the target script\. This is the hello world example (also in examples/hello):
.
.IP "" 4
.
.nf

#!/usr/bin/env jit\.cc

#include <stdio\.h>

int main() {
  printf("Hello world\en");
  return 0;
}
.
.fi
.
.IP "" 0
.
.P
Make sure jit is installed and in your $PATH and set this script executable (\fBchmod a+x examples/hello\fR)\. Now you can run this script directly\. On the first invocation \fBjit\fR produces a binary; on subsequent invocations the already produced binary will be run again\.
.
.IP "" 4
.
.nf

\&\./examples/hello
Building /Users/eno/projects/native/jit/examples/jit\.cc\.bin/hello
Hello world
.
.fi
.
.IP "" 0
.
.P
\fBNote:\fR jit\'s output (\fIBuilding \.\.\fR) is written to stderr to not mingle with anything printed from the script itself\.
.
.SH "INSTALLATION"
Depending on your system
.
.IP "" 4
.
.nf

make install
.
.fi
.
.IP "" 0
.
.P
or
.
.IP "" 4
.
.nf

sudo make install
.
.fi
.
.IP "" 0
.
.P
installs all jit scripts into \fB/usr/local\fR\.
.
.SH "COMPILING BINARIES FOR DISTRIBUTION"
jit can build binaries for distribution\. These binaries are installed close to the source script, in a subdirectory named \fBjit\.LANG\.bin\fR, if it exists\. For example, when running the script "example/hello", the resulting binary will be placed, for example, into example/jit\.cc\.bin/hello\.darwin\.amd64\. You can distribute that binary, if you wish\.
.
.P
This is most helpful with cross compilation to produce binaries, that can be run on platforms that are not that well\-performing (say, arm), and with tool chains that support cross compilation right away (say, go)\. The jit\.go driver supports cross compilation out of the box\.
.
.P
To prevent distribution builds you either
.
.IP "\(bu" 4
make sure the target directory does not exist or is not writable, and/or
.
.IP "\(bu" 4
set the \'JIT_DIST_BUILD\' environment variable to "n"
.
.IP "" 0
.
.SH "ENVIRONMENT VALUES"
.
.IP "\(bu" 4
JIT_DIST_BUILD: set to "n" to prevent distribution builds\.
.
.IP "\(bu" 4
JIT_GO_TARGET_PLATFORMS: target platforms for go cross compilation\.
.
.IP "" 0
.
.SH "LIMITATIONS"
.
.IP "\(bu" 4
Each jitted application should be implemented in a single source file\.
.
.IP "\(bu" 4
The absolute path to a jitted application should not be too long \- the jitted binary will be stored under a name which is longer than the original pathname\.
.
.IP "" 0
.
.SH "COPYRIGHT"
The \fBjit\fR package is Copyright (C) 2013,1024 @radiospiel \fIhttps://github\.com/radiospiel\fR\. It is released under the terms of the MIT license\.
